package com.practice.Services.Impl;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.practice.Entity.Hotel;
import com.practice.Entity.Rating;
import com.practice.Entity.User;
import com.practice.Services.UserServices;
import com.practice.exceptions.ResourceNotFoundException;
import com.practice.repository.UserRepository;

@Service
public class UserServiceImpl implements UserServices {

	@Autowired
	private UserRepository userRepo;

	@Autowired
	private RestTemplate restTemplate;

	private Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);

	@Override
	public User saveUser(User user) {

		// it will generate unique id
		String randomId = UUID.randomUUID().toString();
		user.setUserId(randomId);
		return userRepo.save(user);
	}

	@Override
	public List<User> getAllUser() {
		return userRepo.findAll();
	}

	// get single user
	@Override
	public User getUser(String userId) {

		// get user from database with the help of user repository
		User user = userRepo.findById(userId).orElseThrow(
				() -> new ResourceNotFoundException("User with given id is not found on server!!! : " + userId));

		// fetch rating of above user from Rating service
		// http://localhost:8083/ratings/users/93afa5e1-2462-48e3-9382-b6e40ddf6014

		Rating[] ratingsOfUser = restTemplate.getForObject(
				"http://RATING_SERVICE/ratings/users/"+user.getUserId(), Rating[].class);
		logger.info("{}", ratingsOfUser);
		
		List<Rating> ratings = Arrays.stream(ratingsOfUser).collect(Collectors.toList());
		
		
		List<Rating> ratingList = ratings.stream().map(rating -> {
			
			//api call to hotel
			ResponseEntity<Hotel> forEntity = restTemplate.getForEntity("http://localhost:8082/hotels/"+rating.getHotelId(), Hotel.class);
			Hotel hotel = forEntity.getBody();
			
			//set the hotel to rating
			rating.setHotel(hotel);
			
			return rating;
			
		}).collect(Collectors.toList());
		user.setRatings(ratingList);
		
		return user;
	}

}
